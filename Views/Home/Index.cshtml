@using VidsNet.Models;
@using VidsNet.DataModels;
@using VidsNet.Enums;
@using VidsNet.Classes;
@using Microsoft.AspNetCore.Mvc.Routing;
@using Microsoft.AspNetCore.Html;
@using System.IO;
@{
    Layout = "~/Views/Shared/Layout.cshtml";
    var items = (List<BaseVirtualItem>)@Model.VirtualItems;
    int parentItemCount = items.AsQueryable().Where(x => x.ParentId == 0).Count();
}

@functions {   
    string PrintListing(List<BaseVirtualItem> items, List<RealItem> realItems, int parent, int level) {
        var ret = new TagBuilder("div");
        int padding = level * 25;
        List<BaseVirtualItem> it = items.Where(x => x.ParentId == parent).OrderBy(x => x.Type).ThenBy(y => y.Name).ToList();
        foreach(var item in it) {
            if(item.Type == Item.Folder) {
                ret.InnerHtml.AppendHtml(HtmlHelpers.GenerateViewFolder(item, padding, items.Where(x => x.ParentId == item.Id).Count()));
                ret.InnerHtml.AppendHtml(PrintListing(items, realItems, item.Id, level + 1));
            }
            else {
                var urlContext = new UrlRouteContext() { RouteName = "ItemView"};
                if(VidsNet.Constants.IsSqlite) {
                    var realItem = realItems.Where(x => x.Id == item.RealItemId).First();
                    urlContext.Values = new {id = item.Id, session = Model.SessionHash, name = (item.Name + realItem.Extension)};
                }
                else {
                    var tmp = (VirtualItem)item;
                    urlContext.Values = new {id = tmp.Id, session = Model.SessionHash, name = (tmp.Name + tmp.RealItem.Extension)};
                }

                ret.InnerHtml.AppendHtml(HtmlHelpers.GenerateViewItem(item, padding, Url.RouteUrl(urlContext)));
            }
        }
        //glyphicon glyphicon-menu-hamburger for options
        if(parent != 0) {
            var wrapper = HtmlHelpers.GenerateItem("div", new List<string>() {"collapse"}, new Dictionary<string, string>() {
            { "id", parent.ToString() } }, ret);
            return HtmlHelpers.TagToString(wrapper);
        }

        return HtmlHelpers.TagToString(ret);
    }
}
<div class="list-group">
    <div class="list-group-item" style="background: #D8D8D8">
        <span aria-hidden="true" class="glyphicon-folder-close glyphicon">
            <span id="0_name">Parent</span>
        </span>
        <span class="pull-xs-right label-pill label-default label">@parentItemCount</span>
    </div>

    @Html.Raw(@PrintListing(@Model.VirtualItems, @Model.RealItems, 0, 1))
</div>