@using VidsNet.Models;
@using VidsNet.DataModels;
@using VidsNet.Enums;
@using VidsNet.Classes;
@using Microsoft.AspNetCore.Mvc.Routing;
@using Microsoft.AspNetCore.Html;
@using System.IO;
@{
    Layout = "~/Views/Shared/Layout.cshtml";
    var items = (List<VirtualItem>)@Model.VirtualItems;
    int parentItemCount = items.AsQueryable().Where(x => x.ParentId == 0).Count();
}

@functions {   
    int GetItemCount(int id, int userPathId) {
        var items = (List<RealItem>)@Model.RealItems;
        return items.Where(x => x.UserPathId == userPathId && x.ParentId == 0).Count();
    }

    string PrintListing(List<VirtualItem> virtualItems, List<RealItem> realItems, int parent, int level) {
        TagBuilder ret = null;
        if(parent != 0) {
            ret = HtmlHelpers.GenerateItem("div", new List<string>() {"collapse"}, new Dictionary<string, string>() {
            { "id", string.Format("{0}_content", parent.ToString()) } }, ret);
        }
        else {
            ret = HtmlHelpers.GenerateItem("div", new List<string>(), new Dictionary<string, string>() {});
        }

        int padding = level * 10;
        List<RealItem> it = realItems.Where(x => x.ParentId == parent && (x.Type == Item.Folder || x.Type == Item.Video)).OrderBy(x => x.Type).ThenBy(y => y.Name).ToList();
        for(int i = 0; i < it.Count; i++){
            var item = it[i];
            var isLast = false;
            if(parent == 0 && (i+1) == it.Count) {
                isLast = true;
            }
            if(item.Type == Item.Folder) {
                ret.InnerHtml.AppendHtml(HtmlHelpers.GenerateViewFolder(item, padding, realItems.Where(x => x.ParentId == item.Id).Count(), isLast));
                ret.InnerHtml.AppendHtml(PrintListing(virtualItems, realItems, item.Id, level + 1));
            }
            else {
                var virtualItem = virtualItems.Where(x => x.RealItemId == item.Id && x.UserId == Model.UserId).FirstOrDefault();
                if(virtualItem is VirtualItem) {
                    var urlContext = new UrlRouteContext() { RouteName = "ItemView"};
                    urlContext.Values = new {id = virtualItem.Id, session = Model.SessionHash, name = (virtualItem.Name + item.Extension)};
                    ret.InnerHtml.AppendHtml(HtmlHelpers.GenerateViewItem(item, padding, Url.RouteUrl(urlContext), isLast));
                }
                else {
                    ret.InnerHtml.AppendHtml(HtmlHelpers.GenerateViewItem(item, padding, "#", isLast));
                }

                
            }
        }

        return HtmlHelpers.TagToString(ret);
    }
}
<ul class="nav nav-tabs" id="settingsTabs">
    @{
        var i = 0;
        foreach(var item in Model.Paths) {
            var active = string.Empty;
            if(i == 0) {
                active = "class=\"active\"";
            }

            <li role="presentation" @Html.Raw(active)>
                <a href="#path_@item.Key" aria-controls="path_@item.Key" role="tab" data-toggle="tab">
                    @item.Value <span class="pull-xs-right label-pill label-default label">@GetItemCount(0, item.Key)</span>
                </a>
                
            </li>
            i++;
        }
    }
</ul>
<div class="tab-content" id="physicalContent">
@{
    i = 0;
    foreach(var item in @Model.Paths) {
        var active = string.Empty;
        if(i == 0) {
            active = "active";
        }

        <div role="tabpanel" class="tab-pane @Html.Raw(active)" id="path_@item.Key" style="padding-top: 15px;">
            <div class="list-group">
                @Html.Raw(@PrintListing(@Model.VirtualItems, @Model.RealItems, 0, 1))
            </div>
        </div>
        i++;
    }
}
</div>