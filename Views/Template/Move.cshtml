@using VidsNet.DataModels;
@using VidsNet.Enums;
@using VidsNet.Classes;
@model VidsNet.ViewModels.MoveViewModel
@functions {
    void GenerateFolders(TagBuilder selectTag, int parent, string parentName) {
        List<VirtualItem> folders = @Model.Items.Where(x => x.ParentId == parent && x.Type == Item.Folder).ToList();
        foreach(var folder in folders) {
            var folderDict = new Dictionary<string, string>(){ { "value", folder.Id.ToString()}};
            if(folder.Id == Model.CurrentItem) {
                folderDict.Add("selected", "selected");
            }
            var newParentName = string.Format("{0}/{1}", parentName, folder.Name);
            var option = HtmlHelpers.GenerateItem("option", new List<string>(), folderDict, null, newParentName);
            selectTag.InnerHtml.AppendHtml(option);
            GenerateFolders(selectTag, folder.Id, newParentName);
        }
    }

    string GetFolders() {
        var ret = HtmlHelpers.GenerateItem("select", new List<string>() { "form-control" }, new Dictionary<string, string>() {
                {"id", "parentfolder"} });

        var parentDict = new Dictionary<string, string>(){ { "value", "0"} };
        if(Model.CurrentItem == 0) {
            parentDict.Add("selected", "selected");
        }
        var parentOption = HtmlHelpers.GenerateItem("option", new List<string>(), parentDict, null, "--No Parent--");
        ret.InnerHtml.AppendHtml(parentOption);
        GenerateFolders(ret, 0, "");
        return HtmlHelpers.TagToString(ret);
    }
    
}

<form>
    <fieldset class="form-group">
        <label for="parentfolder">Parent Folder</label>
        @Html.Raw(@GetFolders())
    </fieldset>
</form>